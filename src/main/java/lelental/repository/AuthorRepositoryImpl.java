package lelental.repository;

import lelental.domain.Author;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

/**
 * @author Pawe≈Ç Lelental
 **/
public class AuthorRepositoryImpl implements AuthorRepository {

    private Connection connection;
    private PreparedStatement addAuthorStatement;
    private PreparedStatement getAllAuthorsStatement;

    public AuthorRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            populateDb();
        }
        setConnection(connection);
    }


    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Author".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public void insert(Author author1) throws SQLException {
        addAuthorStatement.setString(1, author1.getName());
        addAuthorStatement.setDate(2, new java.sql.Date(author1.getDateOfCreation().getTime()));
        addAuthorStatement.executeUpdate();
    }

    @Override
    public void delete(int id) {

    }

    @Override
    public void update(Author author) {

    }

    @Override
    public Author findById(int id) throws SQLException {
        PreparedStatement preparedStatement = connection.prepareStatement("SELECT (id,name,date_of_creation) FROM Author WHERE id = ?");
        ResultSet resultSet = preparedStatement.executeQuery();
        return new Author(resultSet.getLong("id"), resultSet.getString("name"), resultSet.getDate("date_of_creation"));
    }

    @Override
    public List<Author> findAll() throws SQLException {
        List<Author> authorList = new LinkedList<>();
        try {
            ResultSet resultSet = getAllAuthorsStatement.executeQuery();
            while (resultSet.next()) {
                Author author = new Author(resultSet.getLong("id"), resultSet.getString("name"),
                        resultSet.getDate("date_of_creation"));
                authorList.add(author);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return authorList;
    }

    @Override
    public void delete(Author author) {

    }

    @Override
    public String sayWhoYouAre() throws SQLException {
        PreparedStatement preparedStatement = connection.prepareStatement("SELECT (id,name,date_of_creation) FROM Author WHERE id = 1");
        ResultSet resultSet = preparedStatement.executeQuery();
        Author author = new Author(resultSet.getLong("id"), resultSet.getString("name"), resultSet.getDate("date_of_creation"));
        return "Hello I'm " + author.getName();
    }

    @Override
    public Author findByName(String name) {
        return null;
    }

    @Override
    public void populateDb() throws SQLException {
        connection.createStatement().executeUpdate("CREATE TABLE Author(id bigint GENERATED BY DEFAULT AS IDENTITY,name varchar(20) NOT NULL, date_of_creation DATE NOT NULL)");
    }

    @Override
    public void dropAuthorTable() throws SQLException {
        connection.createStatement().executeUpdate("DROP TABLE Author");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addAuthorStatement = connection.
                prepareStatement
                        ("INSERT INTO Author (name, date_of_creation) VALUES (?, ?)");
        getAllAuthorsStatement = connection.
                prepareStatement("SELECT id, name, date_of_creation FROM Author");

    }
}
